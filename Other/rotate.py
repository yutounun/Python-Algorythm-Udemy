def rotate(nums, k):
    k = k % len(nums)
    nums[:] = nums[-k:] + nums[:-k]


nums = [1, 2, 3, 4, 5, 6, 7]
k = 3
rotate(nums, k)
print("Rotated array:", nums)


"""
    EXPECTED OUTPUT:
    ----------------
    Rotated array: [5, 6, 7, 1, 2, 3, 4]

"""


"""
k = k % len(nums): まず、k を nums の長さで割った余りに置き換えています。これにより、k が nums の長さを超える場合にも正しく処理できるようになります。たとえば、リストの長さが 7 の場合に 10 回回転させると、実際には 3 回分の回転と等価になります。

nums[:] = nums[-k:] + nums[:-k]: リストをスライスして回転させます。nums[-k:] はリストの最後の k 要素を取り出し、nums[:-k] は残りの要素を取り出します。これらを結合することで、リストが右に k だけ回転された新しいリストが作成されます。

例えば、nums が [1, 2, 3, 4, 5, 6, 7] で k が 3 の場合、nums[-3:] は [5, 6, 7] を、nums[:-3] は [1, 2, 3, 4] をそれぞれ返します。これらを結合すると [5, 6, 7, 1, 2, 3, 4] となり、これが期待される回転後のリストです。
nums[:] = ...: この部分では、元のリスト nums を新しいリストで置き換えています。nums[:] の記法を使用することで、新しいリストが元のリストの同じメモリ位置に配置され、nums は変更された内容を保持します。

この関数を使って nums を回転させると、期待される出力 [5, 6, 7, 1, 2, 3, 4] が得られます。
"""
